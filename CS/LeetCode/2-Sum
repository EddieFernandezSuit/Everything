//Easy Difficulty

// Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

// You may assume that each input would have exactly one solution, and you may not use the same element twice.

// You can return the answer in any order.

 

// Example 1:

// Input: nums = [2,7,11,15], target = 9
// Output: [0,1]
// Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
// Example 2:

// Input: nums = [3,2,4], target = 6
// Output: [1,2]
// Example 3:

// Input: nums = [3,3], target = 6
// Output: [0,1]
 

// Constraints:

// 2 <= nums.length <= 104
// -109 <= nums[i] <= 109
// -109 <= target <= 109
// Only one valid answer exists.
 

// Follow-up: Can you come up with an algorithm that is less than O(n2) time complexity?




public class Solution {
//     public int[] TwoSum(int[] nums, int target) {
            //Brute force method
        
//         for(int i = 0; i < nums.Length; i++)
//         {
//             for(int j = i + 1; j < nums.Length; j++)
//             {
//                 if(nums[i] + nums[j] == target)
//                 {
//                     return new int[]{i,j};;
//                 }
//             }
//         }
//         return new int[]{-1,-1};
//     }
    
//     public int[] TwoSum(int[] nums, int target) {
//         // two-pass hash method
        
//         Dictionary<int,int> addends = new Dictionary<int,int>();
        
//         for(int i = 0; i < nums.Length; i++)
//         {
//             if(addends.ContainsKey(target - nums[i]))
//             {
//                 if(nums[i] + nums[i] == target)
//                 {
//                     return new int[2]{addends[nums[i]], i};
//                 }
//             }
//             else
//             {
//                 addends.Add(target - nums[i], i);
//             }
//         }
//         for(int i = 0; i < nums.Length; i++)
//         {
//             if(addends.ContainsKey(nums[i]) && addends[nums[i]] != i)
//             {
//                 int[] result = new int[2] {addends[nums[i]], i};
//                 return result;
//             }
//         }
        
//         return new int[]{-1,-1};
//     }
    
    public int[] TwoSum(int[] nums, int target) {
        // one-pass hash method
        
        Dictionary<int,int> addends = new Dictionary<int,int>();
        
        for(int i = 0; i < nums.Length; i++)
        {
            if(addends.ContainsKey(target - nums[i]))
            {
                if(nums[i] + nums[i] == target)
                {
                    return new int[2]{addends[nums[i]], i};
                }
            }
            else
            {
                addends.Add(target - nums[i], i);
            }
            
            if(addends.ContainsKey(nums[i]) && addends[nums[i]] != i)
            {
                int[] result = new int[2] {addends[nums[i]], i};
                return result;
            }
        }
        
        return new int[]{-1,-1};
    }
}